import asyncio
from aiogram import Bot, Dispatcher, types, F, filters
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from db import (
    init_models, init_kargos, show_zakaz,
    delete_zakaz, open_connection, close_connection
)

TOKEN = "7955520574:AAFnwODOcjoz4tavTWvwN3_RNzPIwUpe_yA"  

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Zakaz(StatesGroup):
    kod_id = State()
    vazn = State()
    adress = State()
    user_id = State()
    deleted_id = State()

class User(StatesGroup):
    phone_number = State()
    ind_id = State()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑ —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω")],
        [KeyboardButton(text="üè¢ –§–∏–ª–∏–∞–ª—Ö–æ–∏ –º–æ"), KeyboardButton(text="‚ÑπÔ∏è –û–∏–¥–∏ –∫–∞—Ä–≥–æ")],
        [KeyboardButton(text="üìã –î–∏–¥–∞–Ω–∏ –∑–∞–∫–∞–∑—Ö–æ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    await message.answer("–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ Somon Cargo!", reply_markup=main_menu)
    con = open_connection()
    cur = con.cursor()
    cur.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id,))
    user = cur.fetchone()
    if not user:
        await message.answer("üìû –†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
        await state.set_state(User.phone_number)
    else:
        await message.answer("üìå –ê–∑ –º–µ–Ω—é –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:")
    close_connection(con, cur)

@dp.message(User.phone_number)
async def get_phone(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùó –ò–ª—Ç–∏–º–æ—Å, —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
        return
    await state.update_data(phone_number=message.text)
    await message.answer("üìÆ –ò–Ω–¥–µ–∫—Å–∏ –ø–æ—á—Ç–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")
    await state.set_state(User.ind_id)

@dp.message(User.ind_id)
async def get_ind(message: Message, state: FSMContext):
    data = await state.get_data()
    con = open_connection()
    cur = con.cursor()
    cur.execute(
        "INSERT INTO users(telegram_id, username, phone_number, ind_id) VALUES (?, ?, ?, ?)",
        (message.from_user.id, message.from_user.full_name, data["phone_number"], message.text)
    )
    con.commit()
    close_connection(con, cur)
    await state.clear()
    await message.answer("üéâ –®—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Å–∞–±—Ç —à—É–¥–µ–¥!", reply_markup=main_menu)

@dp.message(F.text == "üì¶ –ó–∞–∫–∞–∑ —Ä–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω")
async def zakaz_start(message: Message, state: FSMContext):
    await state.set_state(Zakaz.kod_id)
    await message.answer("üî¢ –ö–æ–¥ ID-–∏ –±–æ—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")

@dp.message(Zakaz.kod_id)
async def zakaz_vazn(message: Message, state: FSMContext):
    await state.update_data(kod_id=message.text)
    await state.set_state(Zakaz.vazn)
    await message.answer("‚öñÔ∏è –í–∞–∑–Ω–∏ –±–æ—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∫–≥):")

@dp.message(Zakaz.vazn)
async def zakaz_adress(message: Message, state: FSMContext):
    if not message.text.replace(".", "").isdigit():
        await message.answer("‚ùó –õ—É—Ç—Ñ–∞–Ω, –≤–∞–∑–Ω—Ä–æ –±–æ —Ä–∞“õ–∞–º –Ω–∞–≤–∏—Å–µ–¥!")
        return
    await state.update_data(vazn=message.text)
    await state.set_state(Zakaz.adress)
    await message.answer("üìç –ê–¥—Ä–µ—Å–∏ –ø—É—Ä—Ä–∞—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:")

@dp.message(Zakaz.adress)
async def zakaz_finish(message: Message, state: FSMContext):
    await state.update_data(adress=message.text, user_id=message.from_user.id)
    data = await state.get_data()
    init_kargos({
        "kod": data["kod_id"],
        "vazn": data["vazn"],
        "adress": data["adress"],
        "user_id": data["user_id"]
    })
    await message.answer("‚úÖ –ó–∞–∫–∞–∑–∏ —à—É–º–æ “õ–∞–±—É–ª —à—É–¥. –î–∞—Ä 15‚Äì25 —Ä”Ø–∑ –º–µ—Ä–∞—Å–∞–¥.")
    await state.clear()

@dp.message(F.text == "üìã –î–∏–¥–∞–Ω–∏ –∑–∞–∫–∞–∑—Ö–æ")
async def show_my_orders(message: Message):
    zakazho = show_zakaz()
    if not zakazho:
        await message.answer("‚õî –®—É–º–æ —è–≥–æ–Ω –∑–∞–∫–∞–∑ –Ω–∞–¥–æ—Ä–µ–¥.")
        return
    response = "üì¶ –ó–∞–∫–∞–∑“≥–æ–∏ —à—É–º–æ:\n\n"
    for zakaz in zakazho:
        response += (
            f"üî¢ –ö–æ–¥: {zakaz[1]}\n"
            f"‚öñÔ∏è –í–∞–∑–Ω: {zakaz[2]} –∫–≥\n"
            f"üìç –ê–¥—Ä–µ—Å: {zakaz[3]}\n\n"
        )
    await message.answer(response)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑")
async def delete_order_prompt(message: Message, state: FSMContext):
    await state.set_state(Zakaz.deleted_id)
    await message.answer("üóë –ö–æ–¥ ID-–∏ –∑–∞–∫–∞–∑—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ –±–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω:")

@dp.message(Zakaz.deleted_id)
async def delete_order_confirm(message: Message, state: FSMContext):
    deleted = delete_zakaz(message.text)
    if deleted:
        await message.answer("‚úÖ –ó–∞–∫–∞–∑–∏ —à—É–º–æ –±–µ–∫–æ—Ä —à—É–¥.")
    
    await state.clear()

@dp.message(F.text == "‚ÑπÔ∏è –û–∏–¥–∏ –∫–∞—Ä–≥–æ")
async def about_info(message: Message):
    await message.answer(
        "üöö Somon Cargo ‚Äî –∫–∞—Ä–≥–æ–∏ –±–µ—Ö–∞—Ç–∞—Ä –≤–∞ –∑—É–¥!\n"
        "‚è± –ú”Ø“≥–ª–∞—Ç–∏ —Ä–∞—Å–æ–Ω–¥–∞–Ω: 15-25 —Ä”Ø–∑\n"
        "üí∞ –ù–∞—Ä—Ö: 2$‚Äì3$, –¥–∞—Ä –î—É—à–∞–Ω–±–µ ‚Äî —Ä–æ–π–≥–æ–Ω!\n"
        "üì¶ –ú–æ –∫–∞—Ñ–æ–ª–∞—Ç –º–µ–¥–∏“≥–µ–º, –∫–∏ –±–æ—Ä–∏ —à—É–º–æ —Å–∞—Ä–∏–≤–∞“õ—Ç –º–µ—Ä–∞—Å–∞–¥."
    )

@dp.message(F.text == "üè¢ –§–∏–ª–∏–∞–ª—Ö–æ–∏ –º–æ")
async def show_branches(message: Message):
    await message.answer(
        "üè¢ –§–∏–ª–∏–∞–ª“≥–æ–∏ –º–æ –¥–∞—Ä –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω:\n\n"
        "1Ô∏è‚É£ –®–∏—Ä–∏–Ω (–Ω–∞–∑–¥–∏ —Ñ–∞–±—Ä–∏–∫–∞)\n"
        "2Ô∏è‚É£ –°–∞—Ö–æ–≤–∞—Ç (–ø—É—à—Ç–∏ –±–æ–∑–æ—Ä)\n"
        "3Ô∏è‚É£ 9 –∫–º (–Ω–∞–∑–¥–∏ –®–∞—Ä–∫ –¢—Ä–∞–Ω—Å)"
    )

async def main():
    init_models()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
